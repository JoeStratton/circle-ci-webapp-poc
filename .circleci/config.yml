version: 2.1

# Orbs for enhanced functionality
orbs:
  aws-cli: circleci/aws-cli@5.4.1
  aws-ecr: circleci/aws-ecr@9.5.4
  docker: circleci/docker@3.0.0
  python: circleci/python@3.2.0
  terraform: circleci/terraform@3.7
  aws-ecs: circleci/aws-ecs@7.1.0

# Executors define the execution environment
executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project
    
  docker-executor:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    
# Commands for reusable logic
commands:
  setup-dependencies:
    description: "Install Python dependencies and setup environment"
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: app/requirements.txt
      - run:
          name: Install additional test dependencies
          command: |
            pip install pytest-xdist pytest-mock bandit flake8
            
  run-tests-with-db:
    description: "Run tests with PostgreSQL database and collect results for CircleCI"
    steps:
      - run:
          name: Install dockerize for database wait
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run integration tests with dedicated script
          command: |
            export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/testdb"
            ./scripts/test-integration.sh
      - store_test_results:
          path: test-results

  security-scan:
    description: "Run security scans and compliance checks"
    steps:
      - run:
          name: Security scan with bandit
          command: |
            mkdir -p test-results
            bandit -r app/app.py -f json -o security-report.json || true
            bandit -r app/app.py -f txt
            # Generate JUnit XML for test results
            bandit -r app/app.py -f json -o test-results/security-tests.xml || true
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: security-report.json
          destination: security-report.json

# Job definitions
jobs:
  # Code quality and linting
  lint-and-format:
    executor: python-executor
    steps:
      - setup-dependencies
      - run:
          name: Run linting checks
          command: |
            echo "Running code quality checks..."
            flake8 app/app.py --max-line-length=120 --statistics
            python -m py_compile app/app.py
            echo "✅ Code quality checks passed"
      - run:
          name: Check requirements
          command: |
            pip check
            echo "✅ Dependencies are compatible"

  # Unit tests without database
  unit-tests:
    executor: python-executor
    steps:
      - setup-dependencies
      - run:
          name: Run unit tests with dedicated script
          command: |
            ./scripts/test-unit.sh
      - store_test_results:
          path: test-results

  # Integration tests with PostgreSQL sidecar 
  integration-tests:
    executor: python-executor
    docker:
      - image: cimg/python:3.11
        environment:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          FLASK_ENV: testing
      - image: cimg/postgres:13.8
        environment:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
    steps:
      - setup-dependencies
      - run-tests-with-db
      - security-scan

  # Build and test custom Docker image 
  build-and-test-image:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - docker/build:
          image: circleci-demo-app
          tag: ${CIRCLE_SHA1}
          dockerfile: docker/Dockerfile
          path: .
      - run:
          name: Start container for tests
          command: |
            docker run -d --name test-app \
              -e DATABASE_URL=sqlite:///test.db \
              -e FLASK_ENV=testing \
              -p 5000:5000 \
              circleci-demo-app:${CIRCLE_SHA1}
      - run:
          name: Health checks
          command: |
            sleep 30
            curl --fail --retry 10 --retry-connrefused --retry-delay 3 http://localhost:5000/health
            curl --fail --retry 10 --retry-connrefused --retry-delay 3 http://localhost:5000/api/health
      - run:
          name: Cleanup
          command: |
            docker stop test-app && docker rm test-app
      - run:
          name: Save Docker image for workspace
          command: |
            docker save circleci-demo-app:${CIRCLE_SHA1} -o docker-image.tar
      - persist_to_workspace:
          root: .
          paths:
            - docker-image.tar

  # Container testing with dgoss (requirement #3)
  container-tests:
    executor: python-executor
    steps:
      - setup-dependencies
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Load Docker image from workspace
          command: |
            docker load -i docker-image.tar
      - run:
          name: Run container tests with dedicated script
          command: |
            ./scripts/test-container.sh
      - store_test_results:
          path: test-results

  # Terraform fmt
  tf-fmt-oidc:
    executor: python-executor
    steps:
      - checkout
      - terraform/fmt:
          path: terraform

  # Terraform validate with OIDC
  tf-validate-oidc:
    executor: python-executor
    steps:
      - checkout
      - aws-cli/setup:
          region: $AWS_REGION
          role_arn: $AWS_ROLE_ARN
      - terraform/init:
          path: terraform
      - terraform/validate:
          path: terraform

  # Terraform OIDC-wrapped jobs
  tf-plan-oidc:
    executor: python-executor
    steps:
      - checkout
      - aws-cli/setup:
          region: $AWS_REGION
          role_arn: $AWS_ROLE_ARN
      - terraform/init:
          path: terraform
      - terraform/plan:
          path: terraform
          out: tfplan
      - persist_to_workspace:
          root: .
          paths:
            - terraform/tfplan

  tf-apply-oidc:
    executor: python-executor
    steps:
      - aws-cli/setup:
          region: $AWS_REGION
          role_arn: $AWS_ROLE_ARN
      - attach_workspace:
          at: .
      - terraform/apply:
          path: terraform
          plan: tfplan

  # CircleCI releases
  release-plan:
    executor: python-executor
    steps:
      - run: circleci run release plan terraform-deploy --environment-name=dev --component-name=infrastructure --target-version=${CIRCLE_SHA1}

  release-update:
    executor: python-executor
    steps:
      - run: circleci run release update terraform-deploy --status=success || circleci run release update terraform-deploy --status=fail

# Workflows define job orchestration with branch-based conditions
workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Phase 1: Code Quality and Testing (runs on all branches in parallel)
      - lint-and-format
      - unit-tests
      - integration-tests
      - tf-fmt-oidc
      - tf-validate-oidc:
          context: aws-production
          requires:
            - tf-fmt-oidc
  
      # Phase 2: Build and Test Docker Image (runs on all branches)
      - build-and-test-image
      
      # Phase 3: Container Testing (runs on all branches, requires previous phases)
      - container-tests:
          requires:
            - lint-and-format
            - unit-tests
            - integration-tests
            - build-and-test-image
      
      # Phase 5: Production Deployment (MAIN BRANCH ONLY)
      - aws-ecr/build_and_push_image:
          context: aws-production
          requires:
            - container-tests
          filters:
            branches:
              only: main
          account_id: ${AWS_ACCOUNT_ID}
          auth:
            - aws-cli/setup:
                role_arn: ${AWS_ROLE_ARN}
          create_repo: true
          dockerfile: docker/Dockerfile
          path: .
          platform: linux/amd64
          push_image: true
          region: ${AWS_REGION}
          repo: circle-ci-webapp-poc-app
          tag: ${CIRCLE_SHA1},latest
      
      - tf-plan-oidc:
          context: aws-production
          requires:
            - aws-ecr/build_and_push_image
            - tf-validate-oidc
          filters:
            branches:
              only: main
      
      - hold-apply:
          type: approval
          requires:
            - aws-ecr/build_and_push_image
            - tf-plan-oidc
          filters:
            branches:
              only: main

      - release-plan:
          requires:
            - hold-apply
          filters:
            branches:
              only: main
      
      - tf-apply-oidc:
          context: aws-production
          requires:
            - hold-apply
          filters:
            branches:
              only: main
      
      - aws-ecs/deploy_service_update:
          context: aws-production
          requires:
            - tf-apply-oidc
          filters:
            branches:
              only: main
          auth:
            - aws-cli/setup:
                role_arn: ${AWS_ROLE_ARN}
          cluster: circle-ci-webapp-poc-cluster
          container_image_name_updates: container=circle-ci-webapp-poc-app,tag=${CIRCLE_SHA1}
          family: circle-ci-webapp-poc-task
          region: ${AWS_REGION}

      - release-update:
          requires:
            - aws-ecs/deploy_service_update
          filters:
            branches:
              only: main